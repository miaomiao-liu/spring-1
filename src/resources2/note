1.SpringAOP

1).加入jar包：
aspectjweaver-1.8.13.jar
com.springsource.org.aopalliance-1.0.0.jar
spring-aop-5.0.2.RELEASE.jar
spring-aspects-5.0.2.RELEASE.jar

commons-logging-1.2.jar
spring-beans-5.0.2.RELEASE.jar
spring-context-5.0.2.RELEASE.jar
spring-core-5.0.2.RELEASE.jar
spring-expression-5.0.2.RELEASE.jar

2).在配置文件中加入aop的命名空间

3).基于注解的方式

   1.在配置文件中加入如下配置：
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>

   2.把横切关注点的代码抽象到切面的类中：
   @Component：将该类交给IOC容器管理
   @Aspect：声明为一个切面

   3.在类中声明各种通知
   在方法前加入@Before @After 。。。

可以在通知方法中声明一个JoinPoint类型的参数，然后就能访问链接细节：
@Aspect
@Component
public class LoggingAspect {

//    将该方法声明为一个前置通知：在目标方法执行之前执行
    @Before("execution(public int com.atguigu.spring2.aop.impl.ArithmeticCalculator.*(int,int))")
    public void beforeMethod(JoinPoint joinPoint){
        String methodName = joinPoint.getSignature().getName();
        List<Object> args = Arrays.asList(joinPoint.getArgs());

        System.out.println("The method " + methodName + " begins with " + args);
    }
}
